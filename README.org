#+STARTUP: showeverything

* Play with List

[[https://www.amazon.co.jp/dp/4756134424][リスト遊び―Emacsで学ぶLispの世界]] の写経用リポジトリ

* 落書き帳
** ミニバッファ

   eval-expression M-:

   #+BEGIN_SRC emacs-lisp
   (+ 1 2) ; RET
   #+END_SRC

*** バッファローカル変数

    変数名や関数名の補完 completion-at-point M-TAB C-M-i

** Emacs Lisp モード

   #+BEGIN_SRC emacs-lisp
   (defun factorial (n)
     (cond
      ((zerop n) 1)
      (t (* n (factorial (1- n))))))
   #+END_SRC

*** 行頭揃え
*** 関数名と変数名の補完
*** 式の評価

    式の最後にカーソルを合わせて C-x C-e

   #+BEGIN_SRC emacs-lisp
   (defun factorial (n)
     (cond
      ((zerop n) 1)
      (t (* n (factorial (1- n)))))) ; C-x C-e
   #+END_SRC

*** 一括評価

    M-x eval-region
    M-x eval-current-buffer

** Lisp Interaction モード

   #+BEGIN_SRC emacs-lisp
   (defun factorial (n)
     (cond
      ((zerop n) 1)
      (t (* n (factorial (1- n)))))) ; C-j
   ; => factorial

   (factorial 5) ; C-j
   ; => 120
   #+END_SRC

* アトムとセル
  * セル cell
    * セルとは一対のポインタであり、それぞれのポインタは任意のデータを指す
  * アトム atom
    * セルでないデータをアトムという

** アトム
   symbol, integer, string

*** シンボル
    変数名と関数名に使われる
    アルファベット・数字・記号文字
    1− はシンボルだが, -1 は整数

    Emacs Lisp では変数名と関数名は独立している。たとえば変数 zoo と同時に、関数 zoo が存在しても良い

*** t と nil
    特殊なシンボル t と nil
    Lisp では nil が false (偽) を意味します。それ以外は真(true)と見なされます。
    t は必ず真になります。t と nil はそれぞれ真と偽を表す定数(constant)であると表現してもよいでしょう

    値が nil か否かを調べるには、 null という関数を使います。引数が nil なら t, それ以外なら nil を返します

    #+BEGIN_SRC emacs-lisp
    (setq zoo nil)
    (null zoo)
    ; => t
    #+END_SRC

    真偽値を返す関数の名前は p で終わっている
    "predicate"

*** 整数
    #+BEGIN_SRC emacs-lisp
    12
    -34
    #+END_SRC

*** 文字列
    #+BEGIN_SRC emacs-lisp
    "dog"
    "-24"
    "\n"
    #+END_SRC

** セル

   CAR                 CDR
    +---------+----------+
    |         |          |
    |    |    |     -----+----->
    +----+----+----------+
         |
         v

    Lisp のセル。左のポインタが CAR, 右のポインタがCDR。


   CAR                 CDR
    +---------+----------+    +---------+----------+   +---------+---------+
    |         |          |    |         |          |   |         |         |
    |    |    |     -----+----+>   |    |   -------+---+>   |    |   ------+----> nil
    +----+----+----------+    +----+----+----------+   +----+----+---------+
         |                         |                        |
         v                         v                        v
         1                         2                        3

    #+BEGIN_SRC emacs-lisp
    (1 2 3)
    #+END_SRC

*** cons
    cons はセルを一つ用意して、第一引数をそのセルのCARで刺し、第二引数をCDRで参照します
    #+BEGIN_SRC emacs-lisp
    (cons 1 nil)
    ; => (1)
    #+END_SRC

    空のリストの先頭に要素を加えるという意味を強調するために、nil を () と書いても構わない
    #+BEGIN_SRC emacs-lisp
    (cons 1 ())
    ; => (1)
    #+END_SRC

    (1 2 3) というリストを作成するためには、次の様に三回 cons を使う
    #+BEGIN_SRC emacs-lisp
    (cons 1 (cons 2 (cons 3 nil)))
    ; => (1 2 3)
    #+END_SRC

    この様に使うので cons セルと呼ばれることがある

    #+BEGIN_SRC emacs-lisp
    (consp 1)
    ; => nil

    (setq zoo (cons 1 nil))
    ; => (1)

    (consp zoo)
    ; => t
    #+END_SRC

    アトムかどうかを調べる

    #+BEGIN_SRC emacs-lisp
    (atom 1)
    ; => t

    (setq zoo (cons 1 nil))
    ; => (1)

    (atom zoo)
    ; => nil
    #+END_SRC

    nil は空リストですが、セルではありません

    #+BEGIN_SRC emacs-lisp
    (atom nil)
    ; => t

    (consp nil)
    ; => nil
    #+END_SRC

    リストか否かを判定する関数 listp

    #+BEGIN_SRC emacs-lisp
    (listp nil)
    ; => t

    (listp 1)
    ; => nil

    (setq zoo (cons 1 nil))
    ; => (1)

    (listp zoo)
    ; => t
    #+END_SRC



*** car と cdr
    セルの CAR が参照しているデータを得るには関数 car を使います。
    同様に CDR が刺しているデータを得るには関数 cdr を使います。


*** リストのリスト
*** ドット対表記
** 評価とクォート
*** 評価
*** クォート
*** バッククォート
* 関数遊び
** 関数定義
** 条件分岐
** eq
** 整数の比較
** and と or
* 再帰
** 階乗
** 数列
** フィボナッチ数列
** 再帰とリスト
** 集合
** 連想リスト
** 等しいリスト
* より深く
** 再帰の再帰
*** 置換*
*** 削除*
*** 集合*
*** 等しいリスト*
* より柔らかに
** 二項演算
** 補助関数
** 連想リストとfuncall
** より抽象的に
* 繰り返し
** ローカル変数
** while
** 数え上げ
** catch と throw
** while と再帰
* セル遊び
** セル操作
*** cons の特性
*** setcar と setcdr
*** 関数と仮引数
*** ゴミ集め
** セル自由自在
** 置換！
** 連結！
** 削除！
* 初心忘るべからず
