* Play with List

[[https://www.amazon.co.jp/dp/4756134424][リスト遊び―Emacsで学ぶLispの世界]] の写経用リポジトリ

* 落書き帳
** ミニバッファ

   eval-expression M-:

   #+BEGIN_SRC emacs-lisp
   (+ 1 2) ; RET
   #+END_SRC

*** バッファローカル変数

    変数名や関数名の補完 completion-at-point M-TAB C-M-i

** Emacs Lisp モード

   #+BEGIN_SRC emacs-lisp
   (defun factorial (n)
     (cond
      ((zerop n) 1)
      (t (* n (factorial (1- n))))))
   #+END_SRC

*** 行頭揃え
*** 関数名と変数名の補完
*** 式の評価

    式の最後にカーソルを合わせて C-x C-e

   #+BEGIN_SRC emacs-lisp
   (defun factorial (n)
     (cond
      ((zerop n) 1)
      (t (* n (factorial (1- n)))))) ; C-x C-e
   #+END_SRC

*** 一括評価

    M-x eval-region
    M-x eval-current-buffer

** Lisp Interaction モード

   #+BEGIN_SRC emacs-lisp
   (defun factorial (n)
     (cond
      ((zerop n) 1)
      (t (* n (factorial (1- n)))))) ; C-j
   ; => factorial

   (factorial 5) ; C-j
   ; => 120
   #+END_SRC

* アトムとセル
** アトム
*** シンボル
*** t と nil
*** 整数
*** 文字列
** セル
*** cons
*** car と cdr
*** リストのリスト
*** ドット対表記
** 評価とクォート
*** 評価
*** クォート
*** バッククォート
* 関数遊び
** 関数定義
** 条件分岐
** eq
** 整数の比較
** and と or
* 再帰
** 階乗
** 数列
** フィボナッチ数列
** 再帰とリスト
** 集合
** 連想リスト
** 等しいリスト
* より深く
** 再帰の再帰
*** 置換*
*** 削除*
*** 集合*
*** 等しいリスト*
* より柔らかに
** 二項演算
** 補助関数
** 連想リストとfuncall
** より抽象的に
* 繰り返し
** ローカル変数
** while
** 数え上げ
** catch と throw
** while と再帰
* セル遊び
** セル操作
*** cons の特性
*** setcar と setcdr
*** 関数と仮引数
*** ゴミ集め
** セル自由自在
** 置換！
** 連結！
** 削除！
* 初心忘るべからず
